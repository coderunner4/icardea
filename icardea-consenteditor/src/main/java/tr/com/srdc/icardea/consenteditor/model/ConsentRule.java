//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.11.23 at 04:13:06 PM EET 
//


package tr.com.srdc.icardea.consenteditor.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="description" type="{model.consenteditor.srdc.com.tr}non_empty_string"/>
 *         &lt;element ref="{model.consenteditor.srdc.com.tr}consentRuleTarget"/>
 *         &lt;element name="isAllow" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element ref="{model.consenteditor.srdc.com.tr}condition" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{model.consenteditor.srdc.com.tr}obligation" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="id" use="required" type="{model.consenteditor.srdc.com.tr}non_empty_string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "description",
    "consentRuleTarget",
    "isAllow",
    "condition",
    "obligation"
})
@XmlRootElement(name = "consentRule")
@Entity(name = "ConsentRule")
@Table(name = "CONSENTRULE")
@Inheritance(strategy = InheritanceType.JOINED)
public class ConsentRule
    implements Serializable, Equals, HashCode
{

    @XmlElement(required = true)
    protected String description;
    @XmlElement(required = true)
    protected ConsentRuleTarget consentRuleTarget;
    @XmlElement(defaultValue = "2")
    protected int isAllow;
    protected List<Condition> condition;
    protected Obligation obligation;
    @XmlAttribute(name = "id", namespace = "model.consenteditor.srdc.com.tr", required = true)
    protected String id;
    @XmlTransient
    protected Long hjid;

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "DESCRIPTION", length = 255)
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the consentRuleTarget property.
     * 
     * @return
     *     possible object is
     *     {@link ConsentRuleTarget }
     *     
     */
    @ManyToOne(targetEntity = ConsentRuleTarget.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONSENTRULETARGET_CONSENTRUL_0")
    public ConsentRuleTarget getConsentRuleTarget() {
        return consentRuleTarget;
    }

    /**
     * Sets the value of the consentRuleTarget property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConsentRuleTarget }
     *     
     */
    public void setConsentRuleTarget(ConsentRuleTarget value) {
        this.consentRuleTarget = value;
    }

    /**
     * Gets the value of the isAllow property.
     * 
     */
    @Basic
    @Column(name = "ISALLOW", precision = 10, scale = 0)
    public int getIsAllow() {
        return isAllow;
    }

    /**
     * Sets the value of the isAllow property.
     * 
     */
    public void setIsAllow(int value) {
        this.isAllow = value;
    }

    /**
     * Gets the value of the condition property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the condition property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCondition().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Condition }
     * 
     * 
     */
    @OneToMany(targetEntity = Condition.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONDITION_CONSENTRULE_HJID")
    public List<Condition> getCondition() {
        if (condition == null) {
            condition = new ArrayList<Condition>();
        }
        return this.condition;
    }

    /**
     * 
     * 
     */
    public void setCondition(List<Condition> condition) {
        this.condition = condition;
    }

    /**
     * Gets the value of the obligation property.
     * 
     * @return
     *     possible object is
     *     {@link Obligation }
     *     
     */
    @ManyToOne(targetEntity = Obligation.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "OBLIGATION_CONSENTRULE_HJID")
    public Obligation getObligation() {
        return obligation;
    }

    /**
     * Sets the value of the obligation property.
     * 
     * @param value
     *     allowed object is
     *     {@link Obligation }
     *     
     */
    public void setObligation(Obligation value) {
        this.obligation = value;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "ID", length = 255)
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * 
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Id
    @Column(name = "HJID")
    @GeneratedValue(strategy = GenerationType.AUTO)
    public Long getHjid() {
        return hjid;
    }

    /**
     * 
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setHjid(Long value) {
        this.hjid = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ConsentRule)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ConsentRule that = ((ConsentRule) object);
        {
            String lhsDescription;
            lhsDescription = this.getDescription();
            String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            ConsentRuleTarget lhsConsentRuleTarget;
            lhsConsentRuleTarget = this.getConsentRuleTarget();
            ConsentRuleTarget rhsConsentRuleTarget;
            rhsConsentRuleTarget = that.getConsentRuleTarget();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "consentRuleTarget", lhsConsentRuleTarget), LocatorUtils.property(thatLocator, "consentRuleTarget", rhsConsentRuleTarget), lhsConsentRuleTarget, rhsConsentRuleTarget)) {
                return false;
            }
        }
        {
            int lhsIsAllow;
            lhsIsAllow = this.getIsAllow();
            int rhsIsAllow;
            rhsIsAllow = that.getIsAllow();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isAllow", lhsIsAllow), LocatorUtils.property(thatLocator, "isAllow", rhsIsAllow), lhsIsAllow, rhsIsAllow)) {
                return false;
            }
        }
        {
            List<Condition> lhsCondition;
            lhsCondition = this.getCondition();
            List<Condition> rhsCondition;
            rhsCondition = that.getCondition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "condition", lhsCondition), LocatorUtils.property(thatLocator, "condition", rhsCondition), lhsCondition, rhsCondition)) {
                return false;
            }
        }
        {
            Obligation lhsObligation;
            lhsObligation = this.getObligation();
            Obligation rhsObligation;
            rhsObligation = that.getObligation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "obligation", lhsObligation), LocatorUtils.property(thatLocator, "obligation", rhsObligation), lhsObligation, rhsObligation)) {
                return false;
            }
        }
        {
            String lhsId;
            lhsId = this.getId();
            String rhsId;
            rhsId = that.getId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            ConsentRuleTarget theConsentRuleTarget;
            theConsentRuleTarget = this.getConsentRuleTarget();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "consentRuleTarget", theConsentRuleTarget), currentHashCode, theConsentRuleTarget);
        }
        {
            int theIsAllow;
            theIsAllow = this.getIsAllow();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isAllow", theIsAllow), currentHashCode, theIsAllow);
        }
        {
            List<Condition> theCondition;
            theCondition = this.getCondition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "condition", theCondition), currentHashCode, theCondition);
        }
        {
            Obligation theObligation;
            theObligation = this.getObligation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "obligation", theObligation), currentHashCode, theObligation);
        }
        {
            String theId;
            theId = this.getId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
