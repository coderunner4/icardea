package tr.com.srdc.icardea.careplanengine.agents.gui;

//import de.offis.icardea.SensorDB.SensorDB_PortType;
//import de.offis.icardea.SensorDB.SensorDB_Service;
//import de.offis.icardea.SensorDB.SensorDB_ServiceLocator;
import tr.com.srdc.icardea.careplanengine.agents.gui.graph.GuidelineMonitoringPanel;
import tr.com.srdc.icardea.careplanengine.agents.gui.util.GuidelineTriggerConnectionHandler;
import tr.com.srdc.icardea.careplanengine.agents.monitoringAgent.MonitoringAgent;
import tr.com.srdc.icardea.careplanengine.entities.AssignmentEntity;
import tr.com.srdc.icardea.careplanengine.entities.HistoryAssignmentEntity;
import tr.com.srdc.icardea.careplanengine.entities.PatientEntity;
import tr.com.srdc.icardea.careplanengine.entities.SensorsSetInfo;
import tr.com.srdc.icardea.careplanengine.glmodel.impl.DefaultGuideline;
import tr.com.srdc.icardea.careplanengine.icardeaRepository.AssignmentRepository;

import javax.swing.*;
import java.awt.*;
import java.net.InetAddress;
import java.net.URL;
import java.util.Date;
import java.util.ResourceBundle;
import java.util.Vector;

/*
 * PatientPanel.java
 *
 * Created on April 3, 2006, 6:42 PM
 */
/**
 * PatientPanel that will be displayed in monitoring tabs.
 * @author  mustafa
 */
@SuppressWarnings("serial")
public class PatientPanel extends javax.swing.JPanel {

	private DefaultGuideline guideline = null;
	private String guidelineURI = null;
	private String sessionID = null;
	private AssignmentEntity assignmentEntity = null;
	private boolean isExecuting = false;
	private boolean hasStarted = false;
	private boolean isFirstTime = true;
	private GuidelineMonitoringPanel guidelineMonitoringPanel = null;
	private int index = -1;
	private boolean isHistory = false;
	private boolean isSubguideline = false;
	public boolean historyState = true;
	public boolean historyOpened = false;
	public Vector associatedAssignments = null;
	private GuidelineTriggerConnectionHandler guidelineTriggerConnectionHandler = null;
//    private GuidelineTriggerConnectionHandler cgm4TriggerConnectionHandler = null;
	private PatientPanel patientPanelCGM4 = null;

	/* Gunes ALUC, SRDC, 19 June 2007 *******************/
	private PatientPanel originatorPatientPanel = null;
	private PatientPanel incubatedPatientPanel = null;
	/* END-OF-EXTENSION *********************************/

	/** Creates new form PatientPanel */
	public PatientPanel(DefaultGuideline guideline, String uri, AssignmentEntity selectedAssignment, int index, boolean isSubguideline, boolean isHistory, String sessionID) {
		this.guideline = guideline;
		this.guidelineURI = uri;
		this.index = index;
		this.isHistory = isHistory;
		this.sessionID = sessionID;
		this.isSubguideline = isSubguideline;
		guidelineMonitoringPanel = new GuidelineMonitoringPanel(this, true, true);   //create GuidelineMonitoringPanel with descriptive panel and console

		assignmentEntity = selectedAssignment;

		buildGuidelineGraph();
		this.setPreferredSize(new java.awt.Dimension(800, 600));
		initComponents();
		executionPanelExt1.setLayout(new GridLayout(1, 1));
		executionPanelExt1.add(guidelineMonitoringPanel);

		if (isSubguideline && !isHistory) {
			startStopButton1.setEnabled(false);
		}

		fillPatientRelatedInfo();
	}

	private void fillPatientRelatedInfo() {
		PatientEntity pe = assignmentEntity.getPatientEntity();
		Long pCode = pe.getPcode();
		String patientName = pe.getName();
		String gender = pe.getGender();
		Date birthDate = pe.getBirthDate();
		int age = (int) (((new Date().getTime() - birthDate.getTime()) / MonitoringGUI.ONE_HOUR)
			/ (24 * 365));

		ImageIcon image = new ImageIcon(pCode + ".jpg");

		pIdField.setText("" + pCode);
		pNameField.setText(patientName);
		pAgeField.setText(age + "");
		pGenderField.setText(gender);

		photoLabel1.setIcon(image);
		photoLabel1.setText("");
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">
	private void initComponents() {
		leftPanel1 = new javax.swing.JPanel();
		guidelineListPanel = new javax.swing.JPanel();
		sensorListPanel = new javax.swing.JPanel();
		patientSummaryPanel = new javax.swing.JPanel();
		pIdLabel = new javax.swing.JLabel();
		pNameLabel = new javax.swing.JLabel();
		pAgeLabel = new javax.swing.JLabel();
		pGenderLabel = new javax.swing.JLabel();
		pDetailsButton = new javax.swing.JButton();
		pIdField = new javax.swing.JTextField();
		pNameField = new javax.swing.JTextField();
		pGenderField = new javax.swing.JTextField();
		pAgeField = new javax.swing.JTextField();
		jPanel2 = new javax.swing.JPanel();
		photoLabel1 = new javax.swing.JLabel();
		startStopButton1 = new javax.swing.JButton();
		jLabel2 = new javax.swing.JLabel();
		guidelineStatusLabel1 = new javax.swing.JTextField();
		executionPanelExt1 = new javax.swing.JPanel();

		leftPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
		guidelineListPanel.setBackground(new java.awt.Color(255, 255, 255));
		guidelineListPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Guideline List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10)));
		org.jdesktop.layout.GroupLayout guidelineListPanelLayout = new org.jdesktop.layout.GroupLayout(guidelineListPanel);
		guidelineListPanel.setLayout(guidelineListPanelLayout);
		guidelineListPanelLayout.setHorizontalGroup(
			guidelineListPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0, 149, Short.MAX_VALUE));
		guidelineListPanelLayout.setVerticalGroup(
			guidelineListPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0, 113, Short.MAX_VALUE));

		sensorListPanel.setBackground(new java.awt.Color(255, 255, 255));
		sensorListPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sensor List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10)));
		org.jdesktop.layout.GroupLayout sensorListPanelLayout = new org.jdesktop.layout.GroupLayout(sensorListPanel);
		sensorListPanel.setLayout(sensorListPanelLayout);
		sensorListPanelLayout.setHorizontalGroup(
			sensorListPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0, 149, Short.MAX_VALUE));
		sensorListPanelLayout.setVerticalGroup(
			sensorListPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0, 124, Short.MAX_VALUE));

		patientSummaryPanel.setBackground(new java.awt.Color(255, 255, 255));
		patientSummaryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patient Health Record", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10)));
		patientSummaryPanel.setFont(new java.awt.Font("Tahoma", 0, 10));
		pIdLabel.setFont(new java.awt.Font("Tahoma", 0, 10));
		pIdLabel.setText("Patient ID: ");

		pNameLabel.setFont(new java.awt.Font("Tahoma", 0, 10));
		pNameLabel.setText("Name: ");

		pAgeLabel.setFont(new java.awt.Font("Tahoma", 0, 10));
		pAgeLabel.setText("Age: ");

		pGenderLabel.setFont(new java.awt.Font("Tahoma", 0, 10));
		pGenderLabel.setText("Gender: ");

		pDetailsButton.setFont(new java.awt.Font("Tahoma", 0, 10));
		pDetailsButton.setText("Details...");
		pDetailsButton.addActionListener(new java.awt.event.ActionListener() {

			public void actionPerformed(java.awt.event.ActionEvent evt) {
			}
		});

		pIdField.setBackground(new java.awt.Color(255, 255, 255));
		pIdField.setEditable(false);

		pNameField.setBackground(new java.awt.Color(255, 255, 255));
		pNameField.setEditable(false);

		pGenderField.setBackground(new java.awt.Color(255, 255, 255));
		pGenderField.setEditable(false);

		pAgeField.setBackground(new java.awt.Color(255, 255, 255));
		pAgeField.setEditable(false);

		jPanel2.setBackground(new java.awt.Color(255, 255, 255));
		jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		photoLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		photoLabel1.setText("NO IMAGE");

		org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(
			jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(photoLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE));
		jPanel2Layout.setVerticalGroup(
			jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(photoLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE));

		org.jdesktop.layout.GroupLayout patientSummaryPanelLayout = new org.jdesktop.layout.GroupLayout(patientSummaryPanel);
		patientSummaryPanel.setLayout(patientSummaryPanelLayout);
		patientSummaryPanelLayout.setHorizontalGroup(
			patientSummaryPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(patientSummaryPanelLayout.createSequentialGroup().add(patientSummaryPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(pAgeLabel).add(pIdLabel).add(pNameLabel).add(pGenderLabel)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(patientSummaryPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false).add(pAgeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(pNameField).add(pGenderField).add(pIdField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).add(org.jdesktop.layout.GroupLayout.TRAILING, patientSummaryPanelLayout.createSequentialGroup().addContainerGap(14, Short.MAX_VALUE).add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(33, 33, 33)).add(patientSummaryPanelLayout.createSequentialGroup().add(pDetailsButton).addContainerGap()));
		patientSummaryPanelLayout.setVerticalGroup(
			patientSummaryPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(patientSummaryPanelLayout.createSequentialGroup().add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(patientSummaryPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(pIdLabel).add(pIdField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(patientSummaryPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(pNameLabel).add(pNameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(patientSummaryPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(pGenderLabel).add(pGenderField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(patientSummaryPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(pAgeLabel).add(pAgeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 17, Short.MAX_VALUE).add(pDetailsButton)));

		org.jdesktop.layout.GroupLayout leftPanel1Layout = new org.jdesktop.layout.GroupLayout(leftPanel1);
		leftPanel1.setLayout(leftPanel1Layout);
		leftPanel1Layout.setHorizontalGroup(
			leftPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(org.jdesktop.layout.GroupLayout.TRAILING, leftPanel1Layout.createSequentialGroup().add(leftPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(org.jdesktop.layout.GroupLayout.LEADING, sensorListPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(org.jdesktop.layout.GroupLayout.LEADING, guidelineListPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).add(org.jdesktop.layout.GroupLayout.LEADING, patientSummaryPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addContainerGap()));
		leftPanel1Layout.setVerticalGroup(
			leftPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(leftPanel1Layout.createSequentialGroup().add(patientSummaryPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(guidelineListPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(sensorListPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		if (!isHistory) {
			startStopButton1.setText("Start Execution");
		} else {
			startStopButton1.setText("Play");
		}
		startStopButton1.addActionListener(new java.awt.event.ActionListener() {

			public void actionPerformed(java.awt.event.ActionEvent evt) {
				if (!isHistory) {
					startStopButtonActionPerformed(evt);
				} else {
					startStopButtonHistoryActionPerformed(evt);
				}
			}
		});

		jLabel2.setText("Status :");
		jLabel2.setToolTipText("Guideline Execution Status");

		guidelineStatusLabel1.setBackground(new java.awt.Color(153, 153, 153));
		guidelineStatusLabel1.setEditable(false);
		guidelineStatusLabel1.setText("Not Started");
		guidelineStatusLabel1.setToolTipText("Guideline Execution Status");

		executionPanelExt1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Graphical Execution of Guideline", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10)));
		org.jdesktop.layout.GroupLayout executionPanelExt1Layout = new org.jdesktop.layout.GroupLayout(executionPanelExt1);
		executionPanelExt1.setLayout(executionPanelExt1Layout);
		executionPanelExt1Layout.setHorizontalGroup(
			executionPanelExt1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0, 547, Short.MAX_VALUE));
		executionPanelExt1Layout.setVerticalGroup(
			executionPanelExt1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0, 548, Short.MAX_VALUE));

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
			layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(leftPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 178, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(layout.createSequentialGroup().add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(guidelineStatusLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 302, Short.MAX_VALUE).add(startStopButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 136, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(executionPanelExt1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addContainerGap()));
		layout.setVerticalGroup(
			layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup().add(executionPanelExt1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(jLabel2).add(guidelineStatusLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(startStopButton1)).addContainerGap()).add(leftPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
	}// </editor-fold>

	private void startStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopButtonActionPerformed

		if (hasStarted) {
			int result = JOptionPane.showConfirmDialog(null,
				"Are you sure you want to terminate the guideline execution?",
				"End Execution?", JOptionPane.YES_NO_OPTION);

			if (result != JOptionPane.OK_OPTION) {
				return;
			}
			MonitoringGUI.getInstance().modifyGuidelineExecutionStatus(assignmentEntity, MonitoringAgent.TERMINATE_GUIDELINE_EXECUTION);
			/*if (assignmentEntity.getGuidelineEntity().getGuidelineID() == 2) {
				callStopMonitoringWS(assignmentEntity.getPatientCode() + "");
				if (associatedAssignments != null) {
					for (int i = 0; i < associatedAssignments.size(); i++) {
						AssignmentEntity entity = (AssignmentEntity) associatedAssignments.elementAt(i);
						MonitoringGUI.getInstance().modifyGuidelineExecutionStatus(entity, MonitoringAgent.TERMINATE_GUIDELINE_EXECUTION);
					}
					associatedAssignments = null;
				}
			}*/
			startStopButton1.setText("Start Execution");
			guidelineStatusLabel1.setText("Stopped");
			guidelineStatusLabel1.setBackground(Color.yellow);

		} else {
			startStopButton1.setText("Stop Execution");
			guidelineStatusLabel1.setText("Running");
			guidelineStatusLabel1.setBackground(Color.green);

			long p_code = assignmentEntity.getPatientCode();
			/*if (assignmentEntity.getGuidelineEntity().getGuidelineID() == 2) {
				associatedAssignments = AssignmentRepository.getAssociateAssignmentsOfAPatient(p_code);
				patientPanelCGM4 = MonitoringGUI.getInstance().addAssociatedGuidelines(associatedAssignments);
				callStartMonitoringWS(assignmentEntity);

				guidelineStatusLabel1.setText("Waiting for trigger");
				guidelineStatusLabel1.setBackground(Color.blue);

				try {
					Thread.sleep(500);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			} else {*/
				MonitoringGUI.getInstance().modifyGuidelineExecutionStatus(assignmentEntity, MonitoringAgent.EXECUTE_GUIDELINE);
			//}
//            for (int i = 0; i < associatedAssignments.size(); i++) {
//                AssignmentEntity entity = (AssignmentEntity) associatedAssignments.elementAt(i);
//                MonitoringGUI.getInstance().modifyGuidelineExecutionStatus(entity, MonitoringAgent.EXECUTE_GUIDELINE);
//            }

//            if(isFirstTime){
//                isFirstTime = false;
//            }else{
//
//            }
		}
		hasStarted = !hasStarted;
	}//GEN-LAST:event_startStopButtonActionPerformed

	private void callStartMonitoringWS(AssignmentEntity assignmentEntity) {
		String pCode = assignmentEntity.getPatientCode() + "";

		int sensorSetID = ((SensorsSetInfo) assignmentEntity.getSensorsSetInfos().iterator().next()).getSid();

		guidelineTriggerConnectionHandler = new GuidelineTriggerConnectionHandler(sensorSetID, this, patientPanelCGM4);
		int portCGM2 = guidelineTriggerConnectionHandler.getPortNo();
		guidelineTriggerConnectionHandler.start();

		//SensorDB_Service sensorDBService = new SensorDB_ServiceLocator();
		try {
			InetAddress inetAddress = InetAddress.getLocalHost();

			ResourceBundle resourceBundle = ResourceBundle.getBundle("conf.icardea");
			String ws_address = resourceBundle.getString("sensordb_ws_address");
			URL endpoint = new java.net.URL(ws_address);
			//SensorDB_PortType sensordb = sensorDBService.getSensorDBSOAP(endpoint);

			//boolean session = sensordb.startMonitoring(pCode, inetAddress.getHostAddress(), portCGM2);
			//if(!session){
			JOptionPane.showMessageDialog(this, "The session has not been started from the Real Time Viewer.\n"
				+ "Please start the session first, and then start the monitoring.",
				"Please start RTV first", JOptionPane.WARNING_MESSAGE);
			guidelineTriggerConnectionHandler.stopSocket();
			//}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private void callStopMonitoringWS(String patientCode) {
		//SensorDB_Service sensorDBService = new SensorDB_ServiceLocator();
		try {
			ResourceBundle resourceBundle = ResourceBundle.getBundle("conf.icardea");
			String ws_address = resourceBundle.getString("sensordb_ws_address");
			URL endpoint = new java.net.URL(ws_address);
			//SensorDB_PortType sensordb = sensorDBService.getSensorDBSOAP(endpoint);
			//sensordb.stopMonitoring(patientCode);

			guidelineTriggerConnectionHandler.stopSocket();
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void triggerReceived_StartCGM() {
		if (assignmentEntity.getGuidelineEntity().getGuidelineID() == 2 || assignmentEntity.getGuidelineEntity().getGuidelineID() == 4) {
			guidelineMonitoringPanel.clearPreviousData();
			isExecuting = true;

			guidelineStatusLabel1.setText("Running");
			guidelineStatusLabel1.setBackground(Color.green);

			MonitoringGUI.getInstance().modifyGuidelineExecutionStatus(assignmentEntity, MonitoringAgent.EXECUTE_GUIDELINE);
		}
	}

	public void cycleCompleted() {
		if (assignmentEntity.getGuidelineEntity().getGuidelineID() == 2 || assignmentEntity.getGuidelineEntity().getGuidelineID() == 4) {
			isExecuting = false;

			guidelineStatusLabel1.setText("Waiting for trigger");
			guidelineStatusLabel1.setBackground(Color.blue);
		}
	}

	private void startStopButtonHistoryActionPerformed(java.awt.event.ActionEvent evt) {
		if (hasStarted) {
			startStopButton1.setText("Play");
			guidelineStatusLabel1.setText("Stopped");
			historyState = false;
			guidelineStatusLabel1.setBackground(Color.yellow);
		} else {
			if (!historyOpened & !isSubguideline) {
				MonitoringGUI.getInstance().startHistoryExecution((HistoryAssignmentEntity) assignmentEntity);
				historyOpened = true;
			}
			historyState = true;
			startStopButton1.setText("Pause");
			guidelineStatusLabel1.setText("Running");
			guidelineStatusLabel1.setBackground(Color.green);
		}
		hasStarted = !hasStarted;
	}//GEN-LAST:event_startStopButtonActionPerformed

	private void pDetailsExecButtonActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
	}

	private void buildGuidelineGraph() {
		guidelineMonitoringPanel.drawGuideline(guideline, guidelineURI);
	}
	// Variables declaration - do not modify
	private javax.swing.JPanel executionPanelExt1;
	private javax.swing.JPanel guidelineListPanel;
	private javax.swing.JTextField guidelineStatusLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel leftPanel1;
	private javax.swing.JTextField pAgeField;
	private javax.swing.JLabel pAgeLabel;
	private javax.swing.JButton pDetailsButton;
	private javax.swing.JTextField pGenderField;
	private javax.swing.JLabel pGenderLabel;
	private javax.swing.JLabel pIdExecLabel;
	private javax.swing.JLabel pIdExecLabel2;
	private javax.swing.JTextField pIdField;
	private javax.swing.JLabel pIdLabel;
	private javax.swing.JLabel pNameExecLabel1;
	private javax.swing.JTextField pNameField;
	private javax.swing.JLabel pNameLabel;
	private javax.swing.JPanel patientSummaryPanel;
	private javax.swing.JLabel photoLabel1;
	private javax.swing.JPanel sensorListPanel;
	private javax.swing.JButton startStopButton1;
	// End of variables declaration

	public int getIndex() {
		return index;
	}

	public void setIndex(int index) {
		this.index = index;
	}

	public void updateStatus(String guidelineStep, String info) {
		guidelineMonitoringPanel.updateStatus(guidelineStep, info);
	}

	public void displayInfo(String guidelineStep, String info, String displayName) {
		guidelineMonitoringPanel.displayInfo(guidelineStep, info, displayName);
	}

	public void showTriggerEvent(String message) {
		guidelineMonitoringPanel.showInHistory(message);
	}

	public void addHistoryEvent(Vector<String> stepInfo) {
		guidelineMonitoringPanel.addHistoryEvent(stepInfo, guideline.getName2());
		if (originatorPatientPanel != null) {
			originatorPatientPanel.addHistoryEvent(stepInfo, guideline.getName2());
		}
	}

	public void addHistoryEvent(Vector<String> stepInfo, String subguidelineName) {
		guidelineMonitoringPanel.addHistoryEvent(stepInfo, subguidelineName);
		if (originatorPatientPanel != null && originatorPatientPanel != this) {
			originatorPatientPanel.addHistoryEvent(stepInfo, subguidelineName);
		}
	}

	public AssignmentEntity getAssignmentEntity() {
		return assignmentEntity;
	}

	public void guidelineStarted() {
		if (!isHistory) {
			startStopButton1.setText("Stop Execution");
		} else {
			startStopButton1.setText("Pause");
		}
		guidelineStatusLabel1.setText("Running");
		guidelineStatusLabel1.setBackground(Color.green);
		hasStarted = !hasStarted;
	}

	/**
	 * @return the isHistory
	 */
	public boolean isHistory() {
		return isHistory;
	}

	/**
	 * @return the sessionID
	 */
	public String getSessionID() {
		return sessionID;
	}

	public String getGuidelineURI() {
		return guidelineURI;
	}


	/* Gunes ALUC, SRDC, 19 June 2007 *******************/
	public PatientPanel getOriginatorPatientPanel() {
		return originatorPatientPanel;
	}

	public void setOriginatorPatientPanel(PatientPanel panel) {
		this.originatorPatientPanel = panel;
	}

	public PatientPanel getIncubatedPatientPanel() {
		return incubatedPatientPanel;
	}

	public void setIncubatedPatientPanel(PatientPanel panel) {
		this.incubatedPatientPanel = panel;
	}

	public DefaultGuideline getGuideline() {
		return guideline;
	}

	public GuidelineMonitoringPanel getGuidelineMonitoringPanel() {
		return guidelineMonitoringPanel;
	}
	/* END-OF-EXTENSION *********************************/

	public void setAssociatedGuidelineStarted() {
		historyState = true;
		startStopButton1.setText("Pause");
		startStopButton1.setEnabled(false);
		guidelineStatusLabel1.setText("Running");
		guidelineStatusLabel1.setBackground(Color.green);
		hasStarted = true;

		if (assignmentEntity.getGuidelineEntity().getGuidelineID() == 3) {
			MonitoringGUI.getInstance().modifyGuidelineExecutionStatus(assignmentEntity, MonitoringAgent.EXECUTE_GUIDELINE);
		} else {
			guidelineStatusLabel1.setText("Waiting for Trigger");
			guidelineStatusLabel1.setBackground(Color.blue);
		}
	}

	public boolean isExecuting() {
		return isExecuting;
	}
}
