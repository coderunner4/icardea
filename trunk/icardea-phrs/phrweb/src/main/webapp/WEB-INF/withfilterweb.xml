<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">
	<display-name>phrweb</display-name>
	<!-- These parameters are read by by the ConfiguratioService, but can be overriden by the xml config file -->
	<!-- testmode testmode=true disables saving of PhrUser when the OpenId session 
		is started it allows null protocol IDs that will be set with a default. Useful 
		for single user mode testing testmode= -->
	<context-param>
		<param-name>testmode</param-name>
		<param-value>true</param-value>
	</context-param>
	<!-- offer a GUI selection list of protocol IDs for testing -->
	<context-param>
		<param-name>show-test-identifiers</param-name>
		<param-value>true</param-value>
	</context-param>
	<!-- how to associate patient identifiers to PHR User -->
	<context-param>
		<param-name>associate-identifiers</param-name>
		<param-value>default</param-value>
	</context-param>
	<!-- different scenarios:
	newuser = openid means that openid creates new users and there is no separate login/user creation to create a local user
	In the future, perhaps a user can add a new claimId while logged in, then when successful that claim ID is added to the user account.
	 -->
	<context-param>
		<param-name>user-management-scenario</param-name>
		<param-value>openid-</param-value>
	</context-param>
	<context-param>
		<param-name>patient-identifier-lookup-property</param-name>
		<param-value>protocolid</param-value>
	</context-param>
	<!--  
	list of where to extract patient identifiers. These might be passed via an openId provider or gui
	<param-value>openid</param-value>
	-->
	<!-- TODO if we use the Dyu properties file to set available providers then 
		we do not need this. The software could check the Dyu file first Use a URL 
		for the iCARDEA OpenId provider, otherwise provide the web application context name of the 
		local provider application		
		 -->
	<context-param>
		<param-name>openid.provider</param-name>
		<param-value>provider</param-value>
	</context-param>
	<!-- Name of OpenId provider on local machine for testing. 'provider' is 
		the application context of the local OpenId provider -->
	<context-param>
		<param-name>openid.provider.test</param-name>
		<param-value>provider</param-value>
	</context-param>
	<context-param>
		<param-name>javax.faces.DATETIMECONVERTER_DEFAULT_TIMEZONE_IS_SYSTEM_TIMEZONE</param-name>
		<param-value>true</param-value>
	</context-param>

	<context-param>
		<param-name>javax.faces.FACELETS_SKIP_COMMENTS</param-name>
		<param-value>true</param-value>
	</context-param>
	<context-param>
		<param-name>primefaces.THEME</param-name>
		<param-value>cupertino</param-value>
	</context-param>
	<!-- casablanca <context-param> <param-name>javax.servlet.jsp.jstl.fmt.localizationContext</param-name> 
		<param-value>resources.application</param-value> </context-param> -->
	<!-- Change to "Production" when you are ready to deploy Development -->
	<context-param>
		<param-name>javax.faces.PROJECT_STAGE</param-name>
		<param-value>Development</param-value>
	</context-param>
	<servlet>
		<servlet-name>Faces Servlet</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<servlet>
		<servlet-name>LoginServlet</servlet-name>
		<servlet-class>at.srfg.kmt.ehealth.phrs.security.services.LoginServlet</servlet-class>
		<load-on-startup>5</load-on-startup>
	</servlet>
		<servlet-mapping>
		<servlet-name>LoginServlet</servlet-name>
		<url-pattern>/login</url-pattern>
		<!-- alternative in case later we want to filter OpenId on *.xhtml <url-pattern>*.faces</url-pattern> -->
	</servlet-mapping>

	<!-- 
<context-param>
    <param-name>com.sun.faces.enableViewStateIdRendering</param-name>
    <param-value>true</param-value>
</context-param>
	 -->
	<servlet-mapping>
		<servlet-name>Faces Servlet</servlet-name>
		<url-pattern>*.xhtml</url-pattern>
		<!-- alternative in case later we want to filter OpenId on *.xhtml <url-pattern>*.faces</url-pattern> -->
	</servlet-mapping>
	<!--<context-param> <param-name>javax.servlet.jsp.jstl.fmt.localizationContext</param-name> 
		<param-value>resources.application</param-value> </context-param> -->
	<context-param>
		<description>State saving method: 'client' or 'server' (=default). See JSF Specification 2.5.2</description>
		<param-name>javax.faces.STATE_SAVING_METHOD</param-name>
		<param-value>client</param-value>
	</context-param>
	<context-param>
		<description>
	This parameter tells MyFaces if javascript code should be allowed in
	the rendered HTML output.
	If javascript is allowed, command_link anchors will have javascript code
	that submits the corresponding form.
	If javascript is not allowed, the state saving info and nested parameters
	will be added as url parameters.
	Default is 'true'</description>
		<param-name>org.apache.myfaces.ALLOW_JAVASCRIPT</param-name>
		<param-value>true</param-value>
	</context-param>
	<context-param>
		<description>
	If true, rendered HTML code will be formatted, so that it is 'human-readable'
	i.e. additional line separators and whitespace will be written, that do not
	influence the HTML code.
	Default is 'true'</description>
		<param-name>org.apache.myfaces.PRETTY_HTML</param-name>
		<param-value>false</param-value>
	</context-param>
	<context-param>
		<param-name>org.apache.myfaces.DETECT_JAVASCRIPT</param-name>
		<param-value>false</param-value>
	</context-param>
	<context-param>
		<description>
	If true, a javascript function will be rendered that is able to restore the
	former vertical scroll on every request. Convenient feature if you have pages
	with long lists and you do not want the browser page to always jump to the top
	if you trigger a link or button action that stays on the same page.
	Default is 'false'
</description>
		<param-name>org.apache.myfaces.AUTO_SCROLL</param-name>
		<param-value>true</param-value>
	</context-param>
	<listener>
		<listener-class>org.apache.myfaces.webapp.StartupServletContextListener</listener-class>
	</listener>

	<listener>
		<listener-class>at.srfg.kmt.ehealth.phrs.DefaultLoader</listener-class>
	</listener>
	<!-- listener: This listener is extremely important for catching the onAuthenticate 
		event, then processing the PhrUser from the authenticated OpenUserId object -->
	<listener>
		<listener-class>at.srfg.kmt.ehealth.phrs.usermgt.openid.dyu.OpenIdContextListener</listener-class>
	</listener>
	<!-- Home has simple registration and set up for the RP, don't use if using 
		the OpenIdContextListener <servlet> <servlet-name>home-servlet</servlet-name> 
		<servlet-class>at.srfg.kmt.ehealth.phrs.usermgt.openid.dyu.example.HomeServlet</servlet-class> 
		<load-on-startup>2</load-on-startup> </servlet> -->
	<!--logout-servlet is only used for testing a sample demo <servlet> <servlet-name>logout-servlet</servlet-name> 
		<servlet-class>at.srfg.kmt.ehealth.phrs.usermgt.openid.dyu.LogoutServlet</servlet-class> 
		<load-on-startup>2</load-on-startup> </servlet> <servlet-mapping> <servlet-name>logout-servlet</servlet-name> 
		<url-pattern>/logout/</url-pattern> </servlet-mapping> -->
	<!-- This has its own config for relying party, do not use, outdated <servlet> 
		<servlet-name>popup-verify-servlet</servlet-name> <servlet-class>at.srfg.kmt.ehealth.phrs.usermgt.openid.dyu.example.PopupVerifyServlet</servlet-class> 
		<load-on-startup>2</load-on-startup> </servlet> -->
	<!-- testing OpenId <servlet-mapping> <servlet-name>home-servlet</servlet-name> 
		<url-pattern>/user/home/</url-pattern> </servlet-mapping> -->

	<!-- There are problems using this filter with JSF viewscope
	Handle the OpenId and provide User with the login form. Param 'forwardUri' 
		is required This needs the OpenIdContextListener to setup the RP and listeners, 
		etc 
	<filter>
		<filter-name>openid-filter</filter-name>
		<filter-class>at.srfg.kmt.ehealth.phrs.security.services.AuthenticationServletFilter</filter-class>
		<init-param>
			<param-name>forwardUri</param-name>
			<param-value>/WEB-INF/views/jsp/login.jsp</param-value>
		</init-param>
	</filter>
	-->
	<!-- <url-pattern>*.jsp</url-pattern> after testing <url-pattern>/jsf/*</url-pattern> 
		Protected resources require login. This is required in order to get (or create) 
		the PhrUser based on the OpenId. 
	<filter-mapping>
		<filter-name>openid-filter</filter-name>
		<url-pattern>/jsf/*</url-pattern>
	</filter-mapping>-->
<!-- <url-pattern>/user/home/*</url-pattern> -->
	<welcome-file-list>
		<welcome-file>index.xhtml</welcome-file>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	<!-- After this, the JSF view exception might occur. Catching that exception 
		automatically is an open issue -->
	<session-config>
		<session-timeout>60</session-timeout>
	</session-config>
	<!-- <filter> <filter-name>openid-filter</filter-name> <filter-class>com.dyuproject.openid.OpenIdServletFilter</filter-class> 
		<load-on-startup>1</load-on-startup> <init-param> <param-name>forwardUri</param-name> 
		<param-value>/login.jsp</param-value> </init-param> </filter> <filter-mapping> 
		<filter-name>openid-filter</filter-name> <url-pattern>*.jsp</url-pattern> 
		</filter-mapping> -->
	<!-- https://cwiki.apache.org/confluence/display/MYFACES/Handling+Server+Errors 
		<error-page> <exception-type>javax.faces.application.ViewExpiredException</exception-type> 
		<location>/timeout.xhtml</location> </error-page> <error-page> <error-code>500</error-code> 
		<location>/somepage.jsp</location> </error-page> javax.faces.application.ViewExpiredException: 
		viewId:/jsf/riskfactor_mgt.xhtml - View /jsf/riskfactor_mgt.xhtml could not 
		be restored. at com.sun.faces.lifecycle.RestoreViewPhase.execute(RestoreViewPhase.java:195) 
		at com.sun.faces.lifecycle.Phase.doPhase(Phase.java:97) at com.sun.faces.lifecycle.RestoreViewPhase.doPhase(RestoreViewPhase.java:106) 
		at com.sun.faces.lifecycle.LifecycleImpl.execute(LifecycleImpl.java:114) 
		at javax.faces.webapp.FacesServlet.service(FacesServlet.java:334) Define 
		the default session timeout for your application, in minutes. From a servlet 
		or JSP page, you can modify the timeout for a particular session dynamically 
		by using HttpSession.getMaxInactiveInterval(). -->

</web-app>