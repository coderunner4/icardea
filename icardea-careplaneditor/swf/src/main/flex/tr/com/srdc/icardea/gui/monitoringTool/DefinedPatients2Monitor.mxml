<?xml version="1.0" encoding="utf-8"?>
  <!--
  ~ ////////////////////////////////////////////////////////////////////////////////
  ~ //
  ~ //  Kap IT  -  Copyright 2009 Kap IT  -  All Rights Reserved.  
  ~ //   
  ~ //  TERMS OF USE  
  ~ //  Developers who wish to access source code must agree to the License that accompanies the code
  ~ //  (see file “License.txt” contained in the archive, or http://lab.kapit.fr/display/Store/Licenses)
  ~ //  If you use the source code, you accept to be bound by the License.  If you do not accept the License, do not use the source code.  
  ~ //  Licensees may use the source code to assist with the development of related software. Licensees may not modify or redistribute the source code.  
  ~ //
  ~ ////////////////////////////////////////////////////////////////////////////////
  -->
<!--
  ~ ////////////////////////////////////////////////////////////////////////////////
  ~ // This tool can be used to change diagrammer mode (link creation, hand or selection mode)
  ~ // It also reflect change to diagrammer mode, should this change be cause by this tool  
  ~ // or an external cause.
  ~ ////////////////////////////////////////////////////////////////////////////////
 -->
<mx:VBox xmlns="fr.kapit.skin.component.*" xmlns:mx="http://www.adobe.com/2006/mxml"
           paddingTop="5" paddingLeft="5" paddingRight="5"
           buttonMode="true" alpha="1.0" horizontalAlign="left"
           verticalAlign="top" width="100%" height="100%" initialize="init()" creationComplete="sendCalls()">
    <mx:Script>
		<![CDATA[
			import mx.rpc.http.mxml.HTTPService;
			import tr.com.srdc.icardea.gui.CarePlanEditor;
			import tr.com.srdc.icardea.model.careplan.MedicalCareplan;
			import tr.com.srdc.icardea.model.userRoles.Patient;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.messaging.channels.SecureAMFChannel;
			import mx.messaging.Channel;
			import mx.messaging.ChannelSet;
			import mx.rpc.remoting.RemoteObject;
			
		import mx.core.Application;
		import mx.controls.Alert;
		import mx.managers.PopUpManager;
		import mx.collections.ArrayCollection;
		import com.kapit.diagram.DiagramEvent;
        import com.kapit.diagram.view.DiagramView;
        
        
        private var isFirstCallCompletedVT:Boolean = false;
		private var isSecondCallCompletedVT:Boolean = false;
		private var isFirstCallCompletedAF:Boolean = false;
		private var isSecondCallCompletedAF:Boolean = false;
		[Bindable]
        public var diagramVT:String;
        [Bindable]
        public var careplanVT:String;
        
        [Bindable]
        public var diagramAF:String;
        [Bindable]
        public var careplanAF:String;

        
            
		[Bindable]
		public var assignments:ArrayCollection = new ArrayCollection;
		[Bindable]
		public var mcp:MedicalCareplan;
		[Bindable]
		public var carePlanEditor:CarePlanEditor;
		
		
		
       public function sendCalls():void {
       		careplanCallVT.send(null);
	       	diagramCallVT.send(null);
	       	
	       	careplanCallAF.send(null);
	       	diagramCallAF.send(null);
       	
       } 
       public function init():void
       {
       		var service : RemoteObject = new RemoteObject("subscriptionService");
			var cs:ChannelSet = new ChannelSet();
			var customChannel:Channel = new SecureAMFChannel("my-amf","/icardea_careplaneditor/messagebroker/amf");
			cs.addChannel(customChannel);
			service.channelSet = cs;
			service.addEventListener(ResultEvent.RESULT,onResultRegisteredPatients);
			service.addEventListener(FaultEvent.FAULT, onFault);
			
			service.listRegisteredPatients();
			
       }
       public function onResultRegisteredPatients(result:ResultEvent):void {
       	trace("patients: "+ (result.result as ArrayCollection).length);
       	
       	trace("assignedCareplans"+((result.result as ArrayCollection).getItemAt(0) as Patient).assignedCareplans.length);
       	//assignments = result.result as ArrayCollection;
       	
     	for(var i:int = 0; i< (result.result as ArrayCollection).length;i++)
     	{
			for(var j:int = 0; j< ((result.result as ArrayCollection).getItemAt(i) as Patient).assignedCareplans.length;j++)
			{
				var obj:Object = new Object;
				obj.personID=((result.result as ArrayCollection).getItemAt(i) as Patient).personID;
				obj.gender=((result.result as ArrayCollection).getItemAt(i) as Patient).gender;
				obj.dateOfBirth=((result.result as ArrayCollection).getItemAt(i) as Patient).dateOfBirth;
				if((obj.dateOfBirth as String).charAt(4) != "-")
					obj.dateOfBirth = (obj.dateOfBirth as String).substring(0,4).concat("-").concat((obj.dateOfBirth as String).substring(4,6)).concat("-").concat((obj.dateOfBirth as String).substring(6,8));
				obj.name=((result.result as ArrayCollection).getItemAt(i) as Patient).name;
				obj.surname = ((result.result as ArrayCollection).getItemAt(i) as Patient).surname;
				obj.careplanName = (((result.result as ArrayCollection).getItemAt(i) as Patient).assignedCareplans.getItemAt(j) as MedicalCareplan).name;
				obj.careplanID = (((result.result as ArrayCollection).getItemAt(i) as Patient).assignedCareplans.getItemAt(j) as MedicalCareplan).id;
				obj.body = (((result.result as ArrayCollection).getItemAt(i) as Patient).assignedCareplans.getItemAt(j) as MedicalCareplan).body;
				obj.header = (((result.result as ArrayCollection).getItemAt(i) as Patient).assignedCareplans.getItemAt(j) as MedicalCareplan).header;
				obj.careplan = (((result.result as ArrayCollection).getItemAt(i) as Patient).assignedCareplans.getItemAt(j) as MedicalCareplan).careplan;
				obj.diagram = (((result.result as ArrayCollection).getItemAt(i) as Patient).assignedCareplans.getItemAt(j) as MedicalCareplan).diagram;
				obj.version = (((result.result as ArrayCollection).getItemAt(i) as Patient).assignedCareplans.getItemAt(j) as MedicalCareplan).version;
				obj.status = (((result.result as ArrayCollection).getItemAt(i) as Patient).assignedCareplans.getItemAt(j) as MedicalCareplan).status;
				obj.url = (((result.result as ArrayCollection).getItemAt(i) as Patient).assignedCareplans.getItemAt(j) as MedicalCareplan).url;
				assignments.addItem(obj);
			}
		}    
       	
       }
       public function onFault(fault:FaultEvent):void 
   	   {
   			Alert.show(fault.fault.faultString);	
   	   } 
   	   
   	   public function serviceResultForDiagramVT(event:ResultEvent):void
	    {
			isSecondCallCompletedVT = true;

			diagramVT = event.result as String;
			
			   
	    }
        public function serviceResultForXMLVT(event:ResultEvent):void
	    {
			isFirstCallCompletedVT = true;

			careplanVT = event.result as String;
	    }
	    
	    public function serviceResultForDiagramAF(event:ResultEvent):void
	    {
			isSecondCallCompletedAF = true;

			diagramAF = event.result as String;
			
			   
	    }
        public function serviceResultForXMLAF(event:ResultEvent):void
	    {
			isFirstCallCompletedAF = true;

			careplanAF = event.result as String;
	    }
	   private function checkIfStateCanBeChanged():void {
			if(patients.selectedItem.personID == 190){
        		if(isFirstCallCompletedAF == true && isSecondCallCompletedAF == true) {
					
					isFirstCallCompletedAF = false;
	 				isSecondCallCompletedAF = false;
	 				mcp.careplan = careplanAF;
	 				mcp.diagram = diagramAF;
					carePlanEditor.careplan = mcp;
					carePlanEditor.executeCareplanObj = patients.selectedItem as Object;
			       
		    		parentApplication.viewStack.selectedIndex = 3;
		    		parentApplication.careplanDT.execute=true;
		    		parentApplication.careplanDT.doSettings();
        		}
			}
			if(patients.selectedItem.personID == 191){
        		if(isFirstCallCompletedVT == true && isSecondCallCompletedVT == true) {
        			
        			isFirstCallCompletedVT = false;
	 				isSecondCallCompletedVT = false;
	 				mcp.careplan = careplanVT;
	 				mcp.diagram = diagramVT;
					carePlanEditor.careplan = mcp;
					carePlanEditor.executeCareplanObj = patients.selectedItem as Object;
			       
		    		parentApplication.viewStack.selectedIndex = 3;
		    		parentApplication.careplanDT.execute=true;
		    		parentApplication.careplanDT.doSettings();
        		}
   			}
   			else {
   				parentApplication.viewStack.selectedIndex = 2;
		    	parentApplication.careplanDT.execute=true;
		    	parentApplication.careplanDT.doSettings();
   			}
	   }
		
	   public function serviceFail(event:FaultEvent):void
	   {
			trace(event.fault.faultString)
	   }
       
       public function openSelected():void
        {
        	 carePlanEditor= parentApplication.careplanDT;
        	
        	
        	
        	if (patients.selectedItem != null) { 
        		
        		/*
	        	trace("CP url: "+(patients.selectedItem as Object).url);
	        	var arr:Array = ((patients.selectedItem as Object).url as String).split(".owl");
				var url:String = arr[0]+".mcpd";
				trace("new url: "+url)*/
				
				mcp = new MedicalCareplan;
	    		mcp.id =patients.selectedItem.careplanID;
	    		mcp.name = patients.selectedItem.careplanName;
	    		mcp.body = patients.selectedItem.body;
	    		mcp.header = patients.selectedItem.header;
	    		//mcp.careplan = patients.selectedItem.careplan;
	    		//mcp.diagram = patients.selectedItem.diagram;
	    		mcp.version = patients.selectedItem.version;
	    		mcp.status = patients.selectedItem.status;
	    		mcp.url =patients.selectedItem.url;
	    		
	    		checkIfStateCanBeChanged();
	    		/* var hs:HTTPService = new HTTPService();
				hs.showBusyCursor = true;
				hs.method = "GET";
				hs.url = "http://localhost:8080/icardea/guidelines/icardea/ManagementofVT-2.cp";
				hs.resultFormat = "text";
				hs.useProxy = false;
				hs.send(null);
				
				hs.addEventListener(ResultEvent.RESULT,serviceResultForXML);
				hs.addEventListener(FaultEvent.FAULT,serviceFail); 
				
				var hs1:HTTPService = new HTTPService();
				hs1.showBusyCursor = true;
				hs1.method = "GET";
				hs1.url = "http://localhost:8080/icardea/guidelines/icardea/ManagementofVT-2.dgr";
				hs1.resultFormat = "text";
				hs1.useProxy = false;
				hs1.send(null);
				
				hs1.addEventListener(ResultEvent.RESULT,serviceResultForDiagram);
				hs1.addEventListener(FaultEvent.FAULT,serviceFail); */
	    		
	    		/*var urlLoader:URLLoader = new URLLoader;
				urlLoader.load(new URLRequest("http://www.google.com.tr/"));
				
				
				
				mcp.careplan = urlLoader.data;*/
	    		trace("cp: "+mcp.careplan)
	    		trace("dgr: "+mcp.diagram)
	    		
	    		
	    		
	        	
	        	//TODO:Engine interface service
	        	     	
	        }
	       else
	        {
	        	Alert.show("Please select a care plan to execute", "No Care Plan Selected");
	        }
        }  
     
	 
       
        ]]>
	</mx:Script>
	<mx:Label text="Execution" width="100%" fontWeight="bold" enabled="true" fontFamily="Arial" fontSize="20"/>
    <mx:DataGrid resizableColumns="true" styleName="usersGrid" width="100%" height="50%" id="patients" dataProvider="{assignments}" borderStyle="none">
    	<mx:columns>
			<mx:DataGridColumn headerText="Patient ID" dataField="personID" />
			<mx:DataGridColumn headerText="Patient Name" dataField="name"/>	
			<mx:DataGridColumn headerText="Patient Surname" dataField="surname" />
			<mx:DataGridColumn headerText="Careplan Name" dataField="careplanName" />
			<!--<mx:DataGridColumn headerText="Careplan ID" dataField="careplanID" />-->
		</mx:columns>
    </mx:DataGrid>	
    <mx:HBox>
		<mx:Button id="openDiagram" label="OPEN" enabled="true" click="openSelected()" styleName="adminButton"/>		
	</mx:HBox>	
	<mx:HTTPService resultFormat = "text" showBusyCursor = "true" useProxy = "false" method = "GET" id="careplanCallVT" url="https://localhost:8443/icardea/guidelines/icardea/ManagementofVT-2.cp" result="serviceResultForXMLVT(event)" fault="serviceFail( event)"/>
	<mx:HTTPService resultFormat = "text" showBusyCursor = "true" useProxy = "false" method = "GET" id="diagramCallVT" url="https://localhost:8443/icardea/guidelines/icardea/ManagementofVT-2.dgr" result="serviceResultForDiagramVT( event )" fault="serviceFail(event)"/>
	<mx:HTTPService resultFormat = "text" showBusyCursor = "true" useProxy = "false" method = "GET" id="careplanCallAF" url="https://localhost:8443/icardea/guidelines/icardea/ManagementofAF-1.cp" result="serviceResultForXMLAF(event)" fault="serviceFail( event)"/>
	<mx:HTTPService resultFormat = "text" showBusyCursor = "true" useProxy = "false" method = "GET" id="diagramCallAF" url="https://localhost:8443/icardea/guidelines/icardea/ManagementofAF-1.dgr" result="serviceResultForDiagramAF( event )" fault="serviceFail(event)"/>
</mx:VBox>
